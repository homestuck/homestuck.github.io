import { promises as fs } from 'node:fs'
import path from 'node:path'
import { rimraf } from 'rimraf'
import { type Registry, registrySchema } from 'shadcn/registry'

import { registry } from '../registry/index.js'

const REGISTRY_PATH = path.join(process.cwd(), 'src/__registry__')
const REGISTRY_FILENAME = 'registry.autogenerated.json'

const parseContent = (content: string) =>
  content
    .replace(/\\/g, '\\\\')
    .replace(/`/g, '\\`')
    .replace(/\${/g, '\\${')
    .replace(/\n/g, '\\n')
    .trim()

const buildRegistry = async (registry: Registry) => {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`
  for (const item of registry.items) {
    console.log(`Adding ${item.name} to registry...`)
    const resolveFiles = item.files?.map(
      (file) => `registry/default/${file.path}`
    )
    if (!resolveFiles) {
      continue
    }

    const componentPath = item.files?.[0]?.path
      ? `@/registry/${item.files[0].path}`
      : ''
    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ''}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `registry/default/${typeof file === 'string' ? file : file.path}`
      const resolvedFilePath = path.resolve(filePath)
      return typeof file === 'string'
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ''}"
    }`
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : 'null'
    },
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`
  }

  index += `
  }`

  const registryJSON = JSON.stringify(
    {
      $schema: 'https://ui.shadcn.com/schema/registry.json',
      name: registry.name,
      homepage: registry.homepage,
      items: registry.items
        .filter((item) => item.type !== 'registry:example')
        .map((item) => ({
          ...item,
          files:
            item.files?.map((file) => {
              if (file.path.startsWith('src/')) {
                return file
              }
              return {
                ...file,
                path: `src/registry/${file.path}`,
              }
            }) ?? [],
        })),
    },
    null,
    2
  )

  rimraf.sync(path.join(REGISTRY_PATH, REGISTRY_FILENAME))
  await fs.writeFile(
    path.join(REGISTRY_PATH, REGISTRY_FILENAME),
    registryJSON,
    'utf8'
  )

  // Build /src/__registry__/index.tsx
  rimraf.sync(path.join(REGISTRY_PATH, 'index.tsx'))
  await fs.writeFile(path.join(REGISTRY_PATH, 'index.tsx'), index)
}

try {
  console.log('ðŸ’½ Building registry...')

  const result = registrySchema.safeParse(registry)

  if (!result.success) {
    console.error(result.error)
    process.exit(1)
  }

  await buildRegistry(result.data)

  console.log('âœ… Done!')
} catch (error) {
  console.error(error)
  process.exit(1)
}
